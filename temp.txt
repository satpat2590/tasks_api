@app.patch("/api/tasks/disable/{task_id}")
async def disable_task(task_id: int):
    """
    Disable task (COMPLETE) - if recurring, advance due_date; if not, set is_active to False

    :request: None
    :response: Message verifying that task was completed
    """
    try:
     # Retrieve the points.json from Github Gists
        points_data = get_points()

     # Get the task first
        task = supabase.table('tasks').select("*").eq('id', task_id).execute()
        if not task.data:
            raise HTTPException(status_code=404, detail="Task not found")
        
        task_data = task.data[0]

     # Calculate points to add for completing task
        puntos = calculate_points(task_data, points_data)

     # Save the points_data back into Github Gist
        save_points(points_data)
        
     # If not recurring, just disable it
        if not task_data['is_recurring']:
            response = supabase.table('tasks').update({
                "is_active": False
            }).eq('id', task_id).execute()
            return {"message": "Task disabled"}
        
     # If recurring, calculate next due date
        current_due = datetime.fromisoformat(task_data['due_date'].replace('Z', '+00:00'))
        pattern = task_data['recurrence_pattern'].lower()
        
     # Calculate next occurrence
        if pattern == 'daily':
            next_due = current_due + timedelta(days=1)
        elif pattern == 'weekly':
            next_due = current_due + timedelta(weeks=1)
        elif pattern == 'monthly':
         # Handle month boundaries properly
            if current_due.month == 12:
                next_due = current_due.replace(year=current_due.year + 1, month=1)
            else:
                next_due = current_due.replace(month=current_due.month + 1)
        elif pattern == 'yearly':
            next_due = current_due.replace(year=current_due.year + 1)
        elif pattern == 'quad-monthly':
            next_due = current_due + timedelta(weeks=4)
        else:
         # Try to parse custom patterns like "every 3 days"
            match = re.match(r'every (\d+) days?', pattern)
            if match:
                days = int(match.group(1))
                next_due = current_due + timedelta(days=days)
            else:
             # Default to weekly if pattern unrecognized
                next_due = current_due + timedelta(weeks=1)
        
     # Update the due date
        response = supabase.table('tasks').update({
            "due_date": next_due.isoformat()
        }).eq('id', task_id).execute()
        
        return {"message": f"Recurring task advanced to {next_due.date()}"}
        
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))